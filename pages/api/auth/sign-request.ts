import jwt from 'jsonwebtoken';
import { NextApiResponse } from 'next';
import errorHandler from '../../../middlewares/error-handler';
import rateLimit from '../../../middlewares/rate-limit';
import { NextApiRequestWithLog } from '../../../types/moveo';
import {
  AppError,
  ForbiddenError,
  MethodNotAllowed,
} from '../../../util/errors';

const PRIVATE_RSA_KEY = `LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBbmhaYXIrNXlmd3ArOVZTcjYxL1U1VktRRGQ2ejJrZEtuK21IUkIrU2xKQTc4NDBuClNiWmllQTR0MGcyeGxzMk4rT2NKWlAxQ2taZENrRFIyTThidnRLa0lleGM5VUNuV0VNOVNTb09LdCtYY2VQVXgKQmhxZ1l3bXVIbWs2dEkwYWZlUGhOYWdyZ2RudG9pNTRkS21BY25IQXRLc3hxUnVEWlpvUVRlR08vWnFNeUkreQpnaWRYaFk1QncyYStiRDFaOUxsVHFoV0FjSWxrcVpPM2M3Z2N0NTY1WDNlb0NCeXV6SW5jUVpxRyt2RnZwZzJXCmhUU2F5ZUFMTFZEM1hsWlB2UVpDOTJqdm1BY2R1a3VQdmJvN0prUEFWcEQveXZCYjNpM1R4dCtaeTJ2TmZQM2sKbkh3Wnl5dmgwbzF4RUpTTHdTZC9pRityOXZoTmV0cHE2SkU0SndJREFRQUJBb0lCQUZpOHJZMEJxSzFkQStUTAo4WEMrcXk5S1IrZ3hNUDErZFFvTU9NeHBlSXNCNTFVUHo1VFYxcklUSzI4MEZwSlNzYldjWWk2WTVxdjRudmw1CktUeHBGNVp1SjMrSWpQY1pkTHFjMVZGVVF5SjAyV3ZnSGZPU01LTkhCTUMzU3FlY2FObHZkN1A1d09vem5Pc2oKY0tQem5WRWdQdzVxNWdaSmxsa0t3TW9tcVcvNlZjcFcwR2lvbHdQOFRkUUZ2MS84NDdFZGMxMEV3cldGZjFhQwpMUS9KMkhzM2RjdHRTazBvTGozdzhBWkhsWTRZRloycFdjdVpXNndTQmNCVDNibW85SU5HOVhpU3d0djZWeHNxCmM4Vy9OYitQZVdRaG9sNzFvem9zSlI5bk9oV3NZS1FvSjBuWXVMNDlXdUJDVTRBRnErVGpSeTFZSXFVNEtmaFYKSEdFMVUxa0NnWUVBenZKQ1hja24zenAvNWs1T2xQRlc4NUo1VkxyV1I3RkxWZnNRK2ExMlJqaW1UNFB1bE95ZQpqR3FwOXZIY0JVdlBwMzJXcVFDUGpFY1hwWGV1cmUxVnZlcUdJUzhzUmRyRmp5S3lWVS9aTTJlVXJhRklrZ3JsCndSMy9Fc1RNcXZBOTZmNGhNY0lHekt6MU93cnpOZ3RlN2ViL2VNRDFBRWVXakZ0cTdhajZZVlVDZ1lFQXc0OUcKUnJ0WDFsakZIMHQwYmFwL1lhVUtrWVBuWVY4aGFJQk9kRnVCejFXeWNxWEZFQnlteVRBdnJIbmJEYS9tWTVUcAozYmk3VFhyTmorWTg5UEVhK0lWeWlTNlV3UGFWTUg4TTR3MEdLUERYdUllS2wxakl0V2VwYkw2MVpxUk1LanlnCndnS1FEN1pXQ3VwSEZGR3NhOEFtUWltZW9GL1FiNFo1LzlNUTQ0c0NnWUJBQzJWU2xRQkw2MVROdDRwR09mSkkKNnhtMWlTVHJod2pqa1JHTjA0cjQ3R3M3ekg2M2hBc0ZOYlZvQVMyd1RlZnowOEFlaVZmamQ5VHZsbnh1d3paMwowZTYwc2w2bk42OVFQdEtsNkZJMXdHYVkzWU1SLzJGZlJLTTk4YjNOWVJBb0xFZWxtSUIyTTBpcGZ4Z0pyN2N2Ck5QLzNKUEF0cC9vRmNmMURrN241Q1FLQmdDbzNqL0JOR1ZWSXJLVm80S1djSFF1eldXaTRsUWJNUnFZTXJPTXAKcmdoWWM4R1VUOHArcFBMaDJDamYxWTVLM3UyNGhCUTlnUkhrNU9PZnpLRUVPOUpTM0xzSXQweEE3MHdjNFdkUwp0SFc2S0pmSml2M0pTT3NBaWU3VDdNMVB3ckdMalJqVS9NeW5qRU9tOTlsSEdIWGFjV2Z2SERONis4Qlh3NWFhCnRoYXBBb0dCQUliS0UwZFZ3Z3pkdTZiMHZ4U0lsci9tNUNMd2RyM2xTaUhLSFo2d1Ayc2JyYnJ3WkdnTEFuYmQKWERRWDkwc0ppZDVZemVnenFrM0lXdU8xKy9CV3dSWXJnbTBoVEluN1RldWpXNE5WaVVHRVhOSnhESHY1TVJWeApXbHFiOExsZzM2bnMveUgxYnp2aFdkWWh5VzNVVTN0UVExejk5dE93SjFIVDd1ZkQ5a2lOCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg`;

export type SignTokenResponse =
  | {
      token: string;
    }
  | {
      code: number;
      error: string;
    };

const limiter = rateLimit({
  interval: 60 * 1000, // 60 seconds
  uniqueTokenPerInterval: 500, // Max 500 users per second
  limit: 20, // Max requests in window
});
const { sign } = jwt;

/**
 * PRIVATE_RSA_KEYS keys have the format costumerID: <RSA KEY ENV. VAR NAME>
 */
export const PRIVATE_RSA_KEYS = {
  demo: PRIVATE_RSA_KEY,
  109005231568317: PRIVATE_RSA_KEY,
};

/**
 * Returns a signed JWT generated by RS256 algorithm.
 */
export function signJWT(sender_id: string, secret: string) {
  const payload = {
    sub: sender_id, // Required
    iss: 'www.webviews.moveo.ai', // Required
  };

  // The "expiresIn" option adds an "exp" claim to the payload.
  return sign(payload, secret, { algorithm: 'RS256', expiresIn: '4000ms' });
}

const VECEL_HOST = 'vercel.app';
const MOVEO_HOST = 'moveo.ai';

/**
 * Signs request by producing JWT token use as Auth in Moveo Integrations
 */
const handler = async (
  req: NextApiRequestWithLog,
  res: NextApiResponse<SignTokenResponse>
) => {
  if (req.method !== 'GET') {
    throw new MethodNotAllowed(req.method);
  }

  // if referer is false-like or it doesnt include any of the allowed domains
  if (
    !req.headers.referer ||
    (!req.headers.referer.includes(VECEL_HOST) &&
      !req.headers.referer.includes(MOVEO_HOST))
  ) {
    req.log.warn(
      'Received request from unauthorized origin: ',
      req.headers.referer
    );
    throw new ForbiddenError();
  }

  // 20 requests per minute
  limiter.check(req, res);

  const sender_id = req.query?.sender_id as string;
  const customer_id = req.query?.customer_id as string;
  if (!sender_id || !customer_id) {
    req.log.warn(
      `Expected required sender_id, customer_id, channel but found ${JSON.stringify(
        req.query
      )}`
    );
    throw new AppError(
      'Missing required parameter: sender_id or customer_id.',
      400
    );
  }
  if (!PRIVATE_RSA_KEYS[customer_id]) {
    req.log.warn(`customer_id ${customer_id} not in known RSA key map`);
    throw new AppError('Bad request: Wrong customer_id', 400);
  }

  const secret = Buffer.from(
    PRIVATE_RSA_KEYS[`${customer_id}`],
    'base64'
  ).toString();

  const signedRequest = signJWT(sender_id, secret);
  return res.json({ token: signedRequest });
};

export default errorHandler(handler);
